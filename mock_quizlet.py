# -*- coding: utf-8 -*-
"""Mock Quizlet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QUDWFAQTcAN7-Z2xj_-4eCu02HiOZu37

## Purpose of the Program

The purpose of the program is to serve as a quizlet for learning new words. The user starts with a list of words, and the program constructs a dictionary witha word's various definitions. By randomly choosing a word and a definition, the program asks the user to provide the word that matches the definition. 

For testing purposes, the program uses a list of three words: cat, dog, and computer.

The goal is for the program to form a quizlet out of a text file containing words that the user would like to know better.

## Imports
The block of code below incorporates the libraries that will be useful in completing the project. Note that the nltk library and wordnet application is used.
"""

#!pip install PyDictionary
import nltk 
from nltk.corpus import wordnet
from collections import defaultdict
import random
import os
from IPython.display import clear_output 
nltk.download('wordnet')

"""## Functions for the Quizlet Application"""

def construct_dictionary(container):
  tracker = defaultdict(lambda : [])
  for word in container:
    word_versions = wordnet.synsets(word)
    for synset in word_versions:
      tracker[word].append(synset.definition())
  return tracker

def question_user(tracker, tested):
  #We randomly pick a word and a definition
  words = list(tracker.keys())
  another = True
  while another:
    chosen_word = random.choice(words)
    if chosen_word not in tested:
      another = False
  chosen_definition = random.choice(tracker[chosen_word])
  return chosen_word, chosen_definition

def check_answer(correct_answer, user_answer, container):
  mover = True
  while mover:
    if user_answer in container:
      mover = False
    else:
      user_answer = input("Please check your_spelling: ")
    
  return correct_answer.lower() == user_answer.lower()
    

def run_stats(correct, total):
  return (correct / total) * 100

def display_errors(words_missed):
  for word, definition in words_missed.items():
    print("Word -> ", word)
    print("Def -> ", definition)
    print("--------------------")
def main():
  container = ["cat", "dog", "computer"]
  tracker = construct_dictionary(container)
  correct = 0
  counter = 0
  total = len(container)
  tested = set()
  mistaken_words = defaultdict(lambda: [])
  while counter < total:
    correct_word, correct_definition = question_user(tracker, tested)
    print("What is the word associated with this definition?")
    print(correct_definition)
    print(container)
    user_answer = input("Answer: ")
    if check_answer(correct_word, user_answer, container):
      print("Correct")
      container.remove(correct_word)
      tested.add(correct_word)
      correct += 1      
    else:
      print("Incorrect")
      mistaken_words[correct_word] = correct_definition
      container.remove(correct_word)
      tested.add(correct_word)
    counter += 1
    clear_output() #For regular programs: os.system('clear')
  
  print("Percentage Correct: ", run_stats(correct, total))
  print("Words to work on")
  print("--------------------")
  display_errors(mistaken_words)

"""##Running the Program"""

if __name__ == "__main__":
  main()